{"version":3,"sources":["components/utils/API.js","keys.js","components/googlemap/index.js","components/navbar/index.js","components/footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["require","config","key","API","googleInfo","axios","get","clearCam","delete","clearAlerts","clearWeather","downCameras","concat","downWeath","downAlerts","postCamera","data","post","postWeath","postAlerts","CameraList","WeatherList","AlertsList","Map","_ref","camState","alertState","weatherState","coord","console","log","googleMap","googleMapRef","useRef","camMarks","alertMarks","weatherMarks","polygonalWash","washBounds","north","south","east","west","outterLine","lat","lng","useEffect","window","google","maps","current","center","restriction","latLngBounds","strictBounds","zoom","TrafficLayer","setMap","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","then","res","camera","forEach","item","LatLng","Latitude","Longitude","marker","Marker","position","title","icon","content","Image","infowindow","InfoWindow","addListener","open","push","weatherDot","temp","Temp","toString","Lat","Long","WindSpeed","Humidity","WindDirect","markerIcon","Priority","Start","EventCategory","HeadlineDescription","react_default","a","createElement","id","ref","style","width","height","Navigation","Navbar","className","collapseOnSelect","expand","Brand","src","alt","Footer","setCamState","setWeatherState","setAlertState","Nav","Item","onClick","loadGoogleMapScript","callback","googleMapScript","document","body","appendChild","addEventListener","App","_useState","useState","_useState2","Object","slicedToArray","loadMap","setLoadMap","_useState3","_useState4","setCoord","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","dWeath","i","length","TemperatureInFahrenheit","RelativeHumidity","ID","StationID","WindDirectionCardinal","WindSpeedInMPH","catch","err","dAlert","AlertID","StartRoadwayLocation","RoadName","End","EndRoadwayLocation","cameras","Cameras","CamData","values","filter","Camera","CameraOwner","e","setTimeout","CameraID","CameraLocation","ImageURL","Title","description","Description","apiCalls","navigator","geolocation","getCurrentPosition","currentLat","coords","latitude","currentLon","longitude","error","code","PERMISSION_DENIED","alert","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","interval","setInterval","clearInterval","navbar","googlemap","footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","src_App","getElementById","URL","process","origin","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.762e4a6e.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport keys from '../../keys';\r\n\r\nrequire('dotenv').config();\r\nconst key = keys.wash();\r\n\r\nexport default {\r\n    googleInfo: function () {\r\n        return axios.get('api/google')\r\n    },\r\n    clearCam: function () {\r\n        return axios.delete('api/cameras')   \r\n    },\r\n    clearAlerts: function () {\r\n        return axios.delete('api/alerts') \r\n    },\r\n    clearWeather: function () {\r\n        return axios.delete('api/weather') \r\n    },\r\n    downCameras: function () {\r\n        return axios.get (`https://cors-anywhere.herokuapp.com/http://www.wsdot.com/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/GetCamerasAsJson?AccessCode=${key}`)\r\n    },\r\n    downWeath : function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/WeatherInformation/WeatherInformationREST.svc/GetCurrentWeatherInformationAsJson?AccessCode=${key}`)\r\n    },\r\n    downAlerts: function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/HighwayAlerts/HighwayAlertsREST.svc/GetAlertsAsJson?AccessCode=${key}`)\r\n    },\r\n    postCamera: function (data) {\r\n        return axios.post(\"api/cameras\", data)\r\n    },\r\n    postWeath: function (data) {\r\n        return axios.post(\"api/weather\", data)\r\n    },\r\n    postAlerts: function (data) {\r\n        return axios.post(\"api/alerts\", data)\r\n    },\r\n    CameraList: function () {\r\n        return axios.get('api/cameras')\r\n    },\r\n    WeatherList: function () {\r\n        return axios.get('api/weather')\r\n    },\r\n    AlertsList: function () {\r\n        return axios.get('api/alerts')\r\n    }\r\n    \r\n}","\r\n\r\nexport default {\r\n    google: function () {\r\n        return \"AIzaSyCqYJCfhuzDRI4b49rtUHSr6QNdxOvRihc\"\r\n    },\r\n    wash: function () {\r\n        return 'ce8eaa09-17ad-46c4-b626-97eaa3a2199d'\r\n    }\r\n}\r\n    \r\n\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport API from '../utils/API';\r\nimport \"./style.css\"\r\n\r\nrequire('dotenv').config();\r\n\r\n \r\n    function Map({camState, alertState, weatherState, coord}){\r\n        console.log(coord)\r\n        const googleMapRef = useRef(null);\r\n        let googleMap;\r\n\r\n        let camMarks = []\r\n        let alertMarks = []\r\n        let weatherMarks = []\r\n        const polygonalWash = require('../../bounds.json');\r\n        const washBounds = {\r\n            // north:49.0027,\r\n            // south:45.5439,\r\n            // east:-116.9165,\r\n            // west:-124.8679\r\n            north:50.0000,\r\n            south: 44.5439,\r\n            east:-115.0000,\r\n            west:-126.0000\r\n        }\r\n        const outterLine = [\r\n            {lat:60.0000, lng: -100.0000},\r\n            {lat:60.0000, lng:-140.0000},\r\n            {lat: 39.5439, lng:-140.0000},\r\n            {lat: 39.5439, lng: -100.0000}\r\n        ]\r\n\r\n        function cameraMarkers () {\r\n            API.CameraList()\r\n            .then(res => {\r\n                let camera = res.data\r\n                console.log(typeof(camera))\r\n                camera.forEach(item => {\r\n                    let LatLng = {\r\n                                    lat: item.Latitude,\r\n                                    lng: item.Longitude\r\n                                };\r\n              \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.title,\r\n                        icon: \"http://maps.google.com/mapfiles/kml/pal4/icon46.png\"\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>'+item.title+'</h!>'+\r\n                    '<br>'+\r\n                    '<img src=\"'+item.Image+'\" alt='\r\n                    +item.title + 'camera width=\"400\" height=\"400\">'+\r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n\r\n                    camMarks.push(marker);\r\n                    if (camState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function weatherMarker () {\r\n            API.WeatherList()\r\n            .then(res => {\r\n                let weatherDot = res.data\r\n                console.log(weatherDot)\r\n                weatherDot.forEach(item => {\r\n                    let temp = item.Temp.toString()\r\n                    let LatLng = {\r\n                        lat: item.Lat,\r\n                        lng: item.Long\r\n                    };\r\n  \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: temp,\r\n                        icon: \"http://maps.google.com/mapfiles/kml/pal4/icon30.png\"\r\n                    });\r\n                    let content;\r\n                    if (item.WindSpeed){\r\n                    content = '<div class=\"markerContent\"' + \r\n                    '<h1>Weather Information</h1>'+\r\n                    '<br>'+\r\n                    '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                    'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                    'Wind Speed: '+ item.WindSpeed.toString() + ' mph <br>'+\r\n                    'Wind Direction: '+item.WindDirect+\r\n                    '</p>'+\r\n                    '</div>';\r\n                    }\r\n                    else {\r\n                        content = '<div class=\"markerContent\"' + \r\n                        '<h1>Weather Information</h1>'+\r\n                        '<br>'+\r\n                        '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                        'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                        'Wind Direction: '+item.WindDirect+\r\n                        '</p>'+\r\n                        '</div>';  \r\n                    }\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    \r\n\r\n                    weatherMarks.push(marker);\r\n                    if (weatherState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function alertMarker() {\r\n            API.AlertsList()\r\n            .then(res => {\r\n                let alertDot = res.data\r\n                alertDot.forEach(item => {\r\n                    let markerIcon =''\r\n                    if (item.Priority==\"High\"){\r\n                        markerIcon = \"http://maps.google.com/mapfiles/kml/pal3/icon33.png\"\r\n                    }\r\n                    else if (item.Priority==\"Medium\"){\r\n                        markerIcon=\"http://maps.google.com/mapfiles/kml/pal3/icon45.png\"\r\n                    }\r\n                    else {\r\n                        markerIcon = \"http://maps.google.com/mapfiles/kml/pal4/icon60.png\"\r\n                    }\r\n\r\n\r\n                    let LatLng = {\r\n                        lat: item.Start.Lat,\r\n                        lng: item.Start.Long\r\n                    };\r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.Priority,\r\n                        icon: markerIcon\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>Alert Information</h1>'+\r\n                    '<br>'+\r\n                    '<h2>'+item.EventCategory+'</h2>'+\r\n                    '<br>'+\r\n                    '<p>'+item.HeadlineDescription+'</p>'+\r\n                    \r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    alertMarks.push(marker)\r\n                    if (alertState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        \r\n        function Border() {\r\n            const borderLine = new window.google.maps.Polygon({\r\n                paths: [outterLine,polygonalWash],\r\n                strokeColor: \"rgb(0,128,84)\",\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n                fillColor: \"#000000\",\r\n                fillOpacity: .50,\r\n\r\n              });\r\n              borderLine.setMap(googleMap);\r\n        }\r\n        function Traffic() {\r\n            var trafficLayer = new window.google.maps.TrafficLayer()\r\n            trafficLayer.setMap(googleMap)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            googleMap = initGoogleMap();\r\n            Traffic();\r\n            Border();\r\n            cameraMarkers();\r\n            weatherMarker();\r\n            alertMarker();\r\n        }, [coord,camState, weatherState, alertState]);\r\n\r\n       \r\n\r\n\r\n\r\n        function initGoogleMap ()  {\r\n            return new window.google.maps.Map(googleMapRef.current, {\r\n              center: coord,\r\n              restriction: {\r\n                latLngBounds: washBounds,\r\n                strictBounds: false,\r\n              },\r\n              zoom: 10\r\n            });\r\n          }\r\n\r\n        return (\r\n            <div  id =\"mapContainer\"\r\n                ref={googleMapRef}\r\n                style={{ width: 1019.33, height: 700 }}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\nexport default Map","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\nimport \"./style.css\"\r\n\r\n\r\n\r\nfunction Navigation () {\r\n    return (\r\n        <Navbar className= \"navigation\" collapseOnSelect expand=\"lg\">\r\n        <Navbar.Brand className=\"Brand\">\r\n            <img src={process.env.PUBLIC_URL + '/washingtonFlag.png'}\r\n            alt=\"washington seal\"\r\n            height=\"50\"\r\n            width=\"50\"\r\n            />\r\n            <p className=\"logo\">iDriveWashington</p>\r\n        </Navbar.Brand>\r\n     \r\n    </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport \"./style.css\"\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction Footer ({weatherState, camState, alertState, setCamState, setWeatherState, setAlertState}) {\r\n    function stateCamera () {\r\n        if (camState) {\r\n            setCamState(false)\r\n    \r\n        }\r\n        else {\r\n            setCamState(true)\r\n     \r\n        }\r\n    }\r\n    function stateAlert () {\r\n        if (alertState) {\r\n            setAlertState(false)\r\n       \r\n        }\r\n        else {\r\n            setAlertState(true)\r\n        \r\n        }\r\n    }\r\n    function stateWeather () {\r\n        if (weatherState) {\r\n            setWeatherState(false)\r\n           \r\n        }\r\n        else {\r\n            setWeatherState(true)\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar className = \"controlBar\">\r\n            <Nav className= \"mr-auto controls\">\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateCamera}>Cameras</button>\r\n            \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateWeather}>Weather</button>\r\n                    \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateAlert}>Alerts</button>\r\n                   \r\n                </Nav.Item>\r\n            </Nav>\r\n        </Navbar>   \r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Map from './components/googlemap';\nimport API from './components/utils/API';\nimport Navigation from './components/navbar';\nimport Footer from \"./components/footer\";\nimport Cameras from \"./cameras.json\";\n\nconst loadGoogleMapScript = (callback) => {\n  if (typeof window.google === 'object' && typeof window.google.maps === 'object') {\n    callback();\n  } else {\n    const googleMapScript = document.createElement(\"script\");\n    googleMapScript.src = \"/api/google\";\n    window.document.body.appendChild(googleMapScript);\n    googleMapScript.addEventListener(\"load\", callback);\n  }\n}\n\n  function App () {\n\n\n\n  const [loadMap, setLoadMap] = useState(false);\n  const [coord, setCoord] = useState({ lat: 47.411293, lng: -120.55627 })\n  const [camState, setCamState] = useState(false);\n  const [alertState, setAlertState] =useState(false);\n  const [weatherState, setWeatherState] =useState(false);\n\n  \n  useEffect(() => {\n    loadGoogleMapScript(() => {\n      setLoadMap(true)\n    });\n  }, []);\n\n  useEffect(() => {\n    apiCalls();\n    initCoord()\n    const interval = setInterval(() => {\n      updateInfo()\n    }, 30*60*1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function initCoord(){\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(successFunction, errorFunction);\n    }\n    else{\n      alert(\"Geolocation is not allowed\")}\n\n    function successFunction(position) {\n      let currentLat = position.coords.latitude;\n      let currentLon = position.coords.longitude;\n\n          // north:49.0027,\n            // south:45.5439,\n            // east:-116.9165,\n            // west:-124.8679\n\n      if (currentLat >= 45.5439 && currentLat <= 49.0027 && currentLon >= -124.8679 && currentLon <= -116.9165){\n        setCoord({lat:currentLat, lng: currentLon})\n      }\n    }\n\n    function errorFunction(error){\n      switch(error.code) {\n          case error.PERMISSION_DENIED:\n            alert(\"User denied the request for Geolocation.\")\n            break;\n          case error.POSITION_UNAVAILABLE:\n            alert(\"Location information is unavailable.\")\n            break;\n          case error.TIMEOUT:\n            alert(\"The request to get user location timed out.\")\n            break;\n          case error.UNKNOWN_ERROR:\n            alert(\"An unknown error occurred.\")\n            break;\n        }\n    }\n  }\n\n  function updateInfo(){\n    API.clearWeather();\n    API.clearAlerts();\n    dWeath();\n    dAlert();\n    console.log(\"info updated\")\n  }\n\n  function apiCalls() {\n    API.clearWeather();\n    API.clearAlerts();\n    let cameras = {Cameras};\n    API.CameraList().then(res => {\n      \n      if (res.data.length > 0){\n      }\n      else{\n        let CamData = Object.values(cameras)\n        CamData = CamData[0]\n        CamData.filter(Camera => Camera.CameraOwner !== \"WSDOT Aviation\")\n        .forEach(e => {\n          setTimeout(() => {\n                        API.postCamera({\n                            CameraID:e.CameraID,\n                            Latitude:e.CameraLocation.Latitude,\n                            Longitude:e.CameraLocation.Longitude,\n                            Image:e.ImageURL,\n                            title:e.Title,\n                            description:e.Description\n                          })\n                          .then((res) => {\n                                console.log(\"Camera Loaded\")\n                            })\n                            .catch((err) => console.log(err));\n                      }, 100);\n        })\n      }\n    })\n    dWeath();\n    dAlert();\n\n\n    \n  }\n\n  function dWeath(){\n    API.downWeath()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n            if (res.data[i].TemperatureInFahrenheit && res.data[i].RelativeHumidity){\n              API.postWeath({\n                ID: res.data[i].StationID,\n                Lat:res.data[i].Latitude,\n                Long:res.data[i].Longitude,\n                Humidity:res.data[i].RelativeHumidity,\n                Temp:res.data[i].TemperatureInFahrenheit,\n                WindDirect:res.data[i].WindDirectionCardinal,\n                WindSpeed:res.data[i].WindSpeedInMPH  \n              })\n              .then((res) => {\n                  console.log(\"weather station \" +res)\n              })\n              .catch((err) => {\n                                console.log(err);\n                              });\n            }\n        }\n    })\n  }\n\n  function dAlert(){\n    API.downAlerts()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n\n            API.postAlerts({\n                AlertID:res.data[i].AlertID,\n                Start: {\n                    Lat:res.data[i].StartRoadwayLocation.Latitude,\n                    Long:res.data[i].StartRoadwayLocation.Longitude,\n                    RoadName:res.data[i].StartRoadwayLocation.RoadName\n                },\n                End: {\n                    Lat:res.data[i].EndRoadwayLocation.Latitude,\n                    Long:res.data[i].EndRoadwayLocation.Longitude,\n                    RoadName:res.data[i].EndRoadwayLocation.RoadName\n                },\n                Priority:res.data[i].Priority,\n                EventCategory:res.data[i].EventCategory,\n                HeadlineDescription:res.data[i].HeadlineDescription\n            })\n            .then((res) => {\n                console.log(\"alerts \" +res)\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n\n                \n        }\n    });\n  }\n\n\n  \n\n    return (\n      <div className=\"App\">\n      <img className = \"backImage\" src= {process.env.PUBLIC_URL + '/washRoad.jpg'}/>\n      <div className=\"frontContent\">\n        <Navigation/>\n    \n \n        {!loadMap ? <div>Loading...</div> : <Map \n                                              camState = {camState} \n                                              alertState = {alertState} \n                                              weatherState = {weatherState}\n                                              coord = {coord}\n                                         \n                                              />}\n        <Footer \n          setCamState = {setCamState} \n          setAlertState = {setAlertState} \n          setWeatherState = {setWeatherState}\n          camState = {camState} \n          alertState = {alertState} \n          weatherState = {weatherState}\n/>\n      </div>\n      </div>\n    );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}