{"version":3,"sources":["components/utils/API.js","keys.js","components/googlemap/index.js","components/navbar/index.js","components/footer/index.js","App.js","registerServiceWorker.js","index.js"],"names":["require","config","key","API","clearCam","axios","delete","clearAlerts","clearWeather","downCameras","get","concat","downWeath","downAlerts","postCamera","data","post","postWeath","postAlerts","CameraList","WeatherList","AlertsList","Map","_ref","googleMap","camState","alertState","weatherState","googleMapRef","useRef","camMarks","alertMarks","weatherMarks","useEffect","window","google","maps","current","center","lat","lng","zoom","TrafficLayer","setMap","then","res","forEach","e","LatLng","Latitude","Longitude","marker","Marker","position","title","content","Image","infowindow","InfoWindow","addListener","open","push","temp","Temp","toString","Lat","Long","WindSpeed","Humidity","WindDirect","Start","Priority","EventCategory","HeadlineDescription","react_default","a","createElement","id","ref","style","width","height","Navigation","Navbar","className","collapseOnSelect","expand","Brand","src","alt","Footer","setCamState","setWeatherState","setAlertState","Nav","Item","onClick","loadGoogleMapScript","callback","googleMapScript","document","body","appendChild","addEventListener","App","_useState","useState","_useState2","Object","slicedToArray","loadMap","setLoadMap","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","dWeath","i","length","TemperatureInFahrenheit","RelativeHumidity","ID","StationID","WindDirectionCardinal","WindSpeedInMPH","console","log","catch","err","dAlert","AlertID","StartRoadwayLocation","RoadName","End","EndRoadwayLocation","cameras","Cameras","CamData","values","filter","Camera","CameraOwner","setTimeout","CameraID","CameraLocation","ImageURL","Title","description","Description","apiCalls","interval","setInterval","clearInterval","navbar","googlemap","footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","src_App","getElementById","URL","process","origin","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71a5b2a1.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport keys from '../../keys';\r\n\r\nrequire('dotenv').config();\r\nconst key = keys.wash();\r\n\r\nexport default {\r\n    clearCam: function () {\r\n        return axios.delete('api/cameras')   \r\n    },\r\n    clearAlerts: function () {\r\n        return axios.delete('api/alerts') \r\n    },\r\n    clearWeather: function () {\r\n        return axios.delete('api/weather') \r\n    },\r\n    downCameras: function () {\r\n        return axios.get (`https://cors-anywhere.herokuapp.com/http://www.wsdot.com/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/GetCamerasAsJson?AccessCode=${key}`)\r\n    },\r\n    downWeath : function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/WeatherInformation/WeatherInformationREST.svc/GetCurrentWeatherInformationAsJson?AccessCode=${key}`)\r\n    },\r\n    downAlerts: function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/HighwayAlerts/HighwayAlertsREST.svc/GetAlertsAsJson?AccessCode=${key}`)\r\n    },\r\n    postCamera: function (data) {\r\n        return axios.post(\"api/cameras\", data)\r\n    },\r\n    postWeath: function (data) {\r\n        return axios.post(\"api/weather\", data)\r\n    },\r\n    postAlerts: function (data) {\r\n        return axios.post(\"api/alerts\", data)\r\n    },\r\n    CameraList: function () {\r\n        return axios.get('api/cameras')\r\n    },\r\n    WeatherList: function () {\r\n        return axios.get('api/weather')\r\n    },\r\n    AlertsList: function () {\r\n        return axios.get('api/alerts')\r\n    }\r\n    \r\n}","\r\n\r\n// const REACT_APP_GOOGLE_API= 'AIzaSyCqYJCfhuzDRI4b49rtUHSr6QNdxOvRihc'\r\n// const REACT_APP_WASH_API= 'ce8eaa09-17ad-46c4-b626-97eaa3a2199d'\r\nexport default {\r\n    google: function () {\r\n        return \"AIzaSyCqYJCfhuzDRI4b49rtUHSr6QNdxOvRihc\"\r\n    },\r\n    wash: function () {\r\n        return 'ce8eaa09-17ad-46c4-b626-97eaa3a2199d'\r\n    }\r\n}\r\n    \r\n\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport API from '../utils/API';\r\nimport \"./style.css\"\r\n\r\nrequire('dotenv').config();\r\n\r\n \r\n    function Map({camState, alertState, weatherState}){\r\n        const googleMapRef = useRef(null);\r\n        let googleMap;\r\n\r\n        let camMarks = []\r\n        let alertMarks = []\r\n        let weatherMarks = []\r\n\r\n        function cameraMarkers () {\r\n            API.CameraList()\r\n            .then(res => {\r\n                let camera = res.data\r\n                camera.forEach(e => {\r\n                    let LatLng = {\r\n                                    lat: e.Latitude,\r\n                                    lng: e.Longitude\r\n                                };\r\n              \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: e.title\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>'+e.title+'</h!>'+\r\n                    '<br>'+\r\n                    '<img src=\"'+e.Image+'\" alt='\r\n                    +e.title + 'camera width=\"400\" height=\"400\">'+\r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n\r\n                    camMarks.push(marker);\r\n                    if (camState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function weatherMarker () {\r\n            API.WeatherList()\r\n            .then(res => {\r\n                let weatherDot = res.data\r\n                weatherDot.forEach(e => {\r\n                    let temp = e.Temp.toString()\r\n                    let LatLng = {\r\n                        lat: e.Lat,\r\n                        lng: e.Long\r\n                    };\r\n  \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: temp\r\n                    });\r\n                    let content;\r\n                    if (e.WindSpeed){\r\n                    content = '<div class=\"markerContent\"' + \r\n                    '<h1>Weather Information</h1>'+\r\n                    '<br>'+\r\n                    '<p class=\"WeatherInfo\">Temperature: '+e.Temp.toString()+ '&#8457 <br>' +\r\n                    'Humidity: '+e.Humidity.toString()+'&#37 <br>'+\r\n                    'Wind Speed: '+ e.WindSpeed.toString() + ' mph <br>'+\r\n                    'Wind Direction: '+e.WindDirect+\r\n                    '</p>'+\r\n                    '</div>';\r\n                    }\r\n                    else {\r\n                        content = '<div class=\"markerContent\"' + \r\n                        '<h1>Weather Information</h1>'+\r\n                        '<br>'+\r\n                        '<p class=\"WeatherInfo\">Temperature: '+e.Temp.toString()+ '&#8457 <br>' +\r\n                        'Humidity: '+e.Humidity.toString()+'&#37 <br>'+\r\n                        'Wind Direction: '+e.WindDirect+\r\n                        '</p>'+\r\n                        '</div>';  \r\n                    }\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    \r\n\r\n                    weatherMarks.push(marker);\r\n                    if (weatherState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function alertMarker() {\r\n            API.AlertsList()\r\n            .then(res => {\r\n                let alertDot = res.data\r\n                alertDot.forEach(e => {\r\n                    let LatLng = {\r\n                        lat: e.Start.Lat,\r\n                        lng: e.Start.Long\r\n                    };\r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: e.Priority\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>Alert Information</h1>'+\r\n                    '<br>'+\r\n                    '<h2>'+e.EventCategory+'</h2>'+\r\n                    '<br>'+\r\n                    '<p>'+e.HeadlineDescription+'</p>'+\r\n                    \r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    alertMarks.push(marker)\r\n                    if (alertState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n     \r\n\r\n\r\n        \r\n        function Traffic() {\r\n            var trafficLayer = new window.google.maps.TrafficLayer()\r\n            trafficLayer.setMap(googleMap)\r\n        }\r\n        \r\n        \r\n        // useEffect(() => {\r\n        //     cameraMarkers()\r\n        //     console.log('this Effect is called')\r\n        // }, [])\r\n        useEffect(() => {\r\n            googleMap = initGoogleMap();\r\n            Traffic();\r\n            cameraMarkers();\r\n            weatherMarker();\r\n            alertMarker();\r\n        }, [camState, weatherState, alertState]);\r\n\r\n\r\n\r\n\r\n        function initGoogleMap ()  {\r\n            return new window.google.maps.Map(googleMapRef.current, {\r\n              center: { lat: 47.411293, lng: -120.55627 },\r\n              zoom: 8\r\n            });\r\n          }\r\n\r\n        return (\r\n            <div  id =\"mapContainer\"\r\n                ref={googleMapRef}\r\n                style={{ width: 1019.33, height: 700 }}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\nexport default Map","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\nimport \"./style.css\"\r\n\r\n\r\n\r\nfunction Navigation () {\r\n    return (\r\n        <Navbar className= \"navigation\" collapseOnSelect expand=\"lg\">\r\n        <Navbar.Brand className=\"Brand\">\r\n            <img src={process.env.PUBLIC_URL + '/washingtonFlag.png'}\r\n            alt=\"washington seal\"\r\n            height=\"50\"\r\n            width=\"50\"\r\n            />\r\n            <p className=\"logo\">iDriveWashington</p>\r\n        </Navbar.Brand>\r\n     \r\n    </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport \"./style.css\"\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction Footer ({weatherState, camState, alertState, setCamState, setWeatherState, setAlertState}) {\r\n    function stateCamera () {\r\n        if (camState) {\r\n            setCamState(false)\r\n    \r\n        }\r\n        else {\r\n            setCamState(true)\r\n     \r\n        }\r\n    }\r\n    function stateAlert () {\r\n        if (alertState) {\r\n            setAlertState(false)\r\n       \r\n        }\r\n        else {\r\n            setAlertState(true)\r\n        \r\n        }\r\n    }\r\n    function stateWeather () {\r\n        if (weatherState) {\r\n            setWeatherState(false)\r\n           \r\n        }\r\n        else {\r\n            setWeatherState(true)\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar className = \"controlBar\">\r\n            <Nav className= \"mr-auto controls\">\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateCamera}>Cameras</button>\r\n            \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateWeather}>Weather</button>\r\n                    \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateAlert}>Alerts</button>\r\n                   \r\n                </Nav.Item>\r\n            </Nav>\r\n        </Navbar>   \r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Map from './components/googlemap';\nimport API from './components/utils/API';\nimport Navigation from './components/navbar';\nimport Footer from \"./components/footer\";\nimport Cameras from \"./cameras.json\";\n\n\nconst loadGoogleMapScript = (callback) => {\n  if (typeof window.google === 'object' && typeof window.google.maps === 'object') {\n    callback();\n  } else {\n    const googleMapScript = document.createElement(\"script\");\n    // googleMapScript.src = `https://maps.googleapis.com/maps/api/js?key=${google}`;\n    googleMapScript.src = `/api/google`;\n    window.document.body.appendChild(googleMapScript);\n    googleMapScript.addEventListener(\"load\", callback);\n  }\n}\n\n  function App () {\n\n\n\n  const [loadMap, setLoadMap] = useState(false);\n  const [camState, setCamState] = useState(false);\n  const [alertState, setAlertState] =useState(false);\n  const [weatherState, setWeatherState] =useState(false);\n\n  \n  useEffect(() => {\n    loadGoogleMapScript(() => {\n      setLoadMap(true)\n    });\n  }, []);\n\n  useEffect(() => {\n    apiCalls();\n    const interval = setInterval(() => {\n      updateInfo()\n    }, 30*60*1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function updateInfo(){\n    API.clearWeather();\n    API.clearAlerts();\n    dWeath();\n    dAlert();\n    console.log(\"info updated\")\n  }\n\n  function apiCalls() {\n    API.clearWeather();\n    API.clearAlerts();\n    let cameras = {Cameras};\n    API.CameraList().then(res => {\n      \n      if (res.data.length > 0){\n      }\n      else{\n        let CamData = Object.values(cameras)\n        CamData = CamData[0]\n        CamData.filter(Camera => Camera.CameraOwner !== \"WSDOT Aviation\")\n        .forEach(e => {\n          setTimeout(() => {\n                        API.postCamera({\n                            CameraID:e.CameraID,\n                            Latitude:e.CameraLocation.Latitude,\n                            Longitude:e.CameraLocation.Longitude,\n                            Image:e.ImageURL,\n                            title:e.Title,\n                            description:e.Description\n                          })\n                          .then((res) => {\n                                console.log(\"Camera Loaded\")\n                            })\n                            .catch((err) => console.log(err));\n                      }, 100);\n        })\n      }\n    })\n    dWeath();\n    dAlert();\n\n\n    \n  }\n\n  function dWeath(){\n    API.downWeath()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n            if (res.data[i].TemperatureInFahrenheit && res.data[i].RelativeHumidity){\n              API.postWeath({\n                ID: res.data[i].StationID,\n                Lat:res.data[i].Latitude,\n                Long:res.data[i].Longitude,\n                Humidity:res.data[i].RelativeHumidity,\n                Temp:res.data[i].TemperatureInFahrenheit,\n                WindDirect:res.data[i].WindDirectionCardinal,\n                WindSpeed:res.data[i].WindSpeedInMPH  \n              })\n              .then((res) => {\n                  console.log(\"weather station \" +res)\n              })\n              .catch((err) => {\n                                console.log(err);\n                              });\n            }\n        }\n    })\n  }\n\n  function dAlert(){\n    API.downAlerts()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n\n            API.postAlerts({\n                AlertID:res.data[i].AlertID,\n                Start: {\n                    Lat:res.data[i].StartRoadwayLocation.Latitude,\n                    Long:res.data[i].StartRoadwayLocation.Longitude,\n                    RoadName:res.data[i].StartRoadwayLocation.RoadName\n                },\n                End: {\n                    Lat:res.data[i].EndRoadwayLocation.Latitude,\n                    Long:res.data[i].EndRoadwayLocation.Longitude,\n                    RoadName:res.data[i].EndRoadwayLocation.RoadName\n                },\n                Priority:res.data[i].Priority,\n                EventCategory:res.data[i].EventCategory,\n                HeadlineDescription:res.data[i].HeadlineDescription\n            })\n            .then((res) => {\n                console.log(\"alerts \" +res)\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n\n                \n        }\n    });\n  }\n\n\n  \n\n    return (\n      <div className=\"App\">\n      <img className = \"backImage\" src= {process.env.PUBLIC_URL + '/washRoad.jpg'}/>\n      <div className=\"frontContent\">\n        <Navigation/>\n    \n \n        {!loadMap ? <div>Loading...</div> : <Map \n                                              camState = {camState} \n                                              alertState = {alertState} \n                                              weatherState = {weatherState} \n                                         \n                                              />}\n        <Footer \n          setCamState = {setCamState} \n          setAlertState = {setAlertState} \n          setWeatherState = {setWeatherState}\n          camState = {camState} \n          alertState = {alertState} \n          weatherState = {weatherState}\n/>\n      </div>\n      </div>\n    );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}