{"version":3,"sources":["components/utils/API.js","keys.js","components/googlemap/index.js","components/navbar/index.js","components/footer/index.js","components/table/index.js","App.js","registerServiceWorker.js","index.js"],"names":["require","config","key","API","googleInfo","axios","get","clearCam","delete","clearAlerts","clearWeather","downCameras","concat","downWeath","downAlerts","postCamera","data","post","postWeath","postAlerts","CameraList","WeatherList","AlertsList","Distance","coord","alert","radlat1","Math","PI","lat","radlat2","theta","lng","radtheta","dist","sin","cos","acos","round","Map","_ref","camState","alertState","weatherState","console","log","googleMap","googleMapRef","useRef","camMarks","alertMarks","weatherMarks","polygonalWash","washBounds","north","south","east","west","outterLine","useEffect","window","google","maps","current","center","restriction","latLngBounds","strictBounds","zoom","TrafficLayer","setMap","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","then","res","forEach","item","LatLng","Latitude","Longitude","marker","Marker","position","title","icon","content","Image","infowindow","InfoWindow","addListener","open","push","weatherDot","temp","Temp","toString","Lat","Long","WindSpeed","Humidity","WindDirect","markerIcon","Priority","Start","EventCategory","HeadlineDescription","react_default","a","createElement","id","ref","style","width","height","Navigation","Navbar","className","collapseOnSelect","expand","Brand","src","alt","Footer","setCamState","setWeatherState","setAlertState","Nav","Item","onClick","Table","props","_useState","useState","sortBy","b","distance","_useState2","Object","slicedToArray","sort","setSort","alerts","alertCoord","StartRoadwayLocation","rating","localeCompare","RoadName","AlertID","toConsumableArray","filter","map","loadGoogleMapScript","callback","googleMapScript","document","body","appendChild","addEventListener","App","setAlerts","_useState3","_useState4","loadMap","setLoadMap","_useState5","_useState6","setCoord","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","dWeath","i","length","TemperatureInFahrenheit","RelativeHumidity","ID","StationID","WindDirectionCardinal","WindSpeedInMPH","catch","err","dAlert","End","EndRoadwayLocation","cameras","Cameras","CamData","values","Camera","CameraOwner","e","setTimeout","CameraID","CameraLocation","ImageURL","Title","description","Description","apiCalls","navigator","geolocation","getCurrentPosition","currentLat","coords","latitude","currentLon","longitude","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","interval","setInterval","clearInterval","navbar","googlemap","footer","table","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","src_App","getElementById","URL","process","origin","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.28c6bc88.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport keys from '../../keys';\r\n\r\nrequire('dotenv').config();\r\nconst key = keys.wash();\r\n\r\nexport default {\r\n    googleInfo: function () {\r\n        return axios.get('api/google')\r\n    },\r\n    clearCam: function () {\r\n        return axios.delete('api/cameras')   \r\n    },\r\n    clearAlerts: function () {\r\n        return axios.delete('api/alerts') \r\n    },\r\n    clearWeather: function () {\r\n        return axios.delete('api/weather') \r\n    },\r\n    downCameras: function () {\r\n        return axios.get (`https://cors-anywhere.herokuapp.com/http://www.wsdot.com/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/GetCamerasAsJson?AccessCode=${key}`)\r\n    },\r\n    downWeath : function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/WeatherInformation/WeatherInformationREST.svc/GetCurrentWeatherInformationAsJson?AccessCode=${key}`)\r\n    },\r\n    downAlerts: function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/HighwayAlerts/HighwayAlertsREST.svc/GetAlertsAsJson?AccessCode=${key}`)\r\n    },\r\n    postCamera: function (data) {\r\n        return axios.post(\"api/cameras\", data)\r\n    },\r\n    postWeath: function (data) {\r\n        return axios.post(\"api/weather\", data)\r\n    },\r\n    postAlerts: function (data) {\r\n        return axios.post(\"api/alerts\", data)\r\n    },\r\n    CameraList: function () {\r\n        return axios.get('api/cameras')\r\n    },\r\n    WeatherList: function () {\r\n        return axios.get('api/weather')\r\n    },\r\n    AlertsList: function () {\r\n        return axios.get('api/alerts')\r\n    },\r\n    Distance: function (coord, alert) {\r\n        const radlat1 = Math.PI * coord.lat/180;\r\n\t\tconst radlat2 = Math.PI * alert.lat/180;\r\n\t\tconst theta = coord.lng-alert.lng;\r\n\t\tconst radtheta = Math.PI * theta/180;\r\n        let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n\t\t\tdist = 1;\r\n\t\t}\r\n\t\tdist = Math.acos(dist);\r\n\t\tdist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        dist = Math.round(dist)\r\n\r\n        return dist\r\n    }\r\n    \r\n}","\r\n\r\nexport default {\r\n    google: function () {\r\n        return \"AIzaSyCqYJCfhuzDRI4b49rtUHSr6QNdxOvRihc\"\r\n    },\r\n    wash: function () {\r\n        return 'ce8eaa09-17ad-46c4-b626-97eaa3a2199d'\r\n    }\r\n}\r\n    \r\n\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport API from '../utils/API';\r\nimport \"./style.css\"\r\n\r\nrequire('dotenv').config();\r\n\r\n \r\n    function Map({camState, alertState, weatherState, coord}){\r\n        console.log(coord)\r\n        const googleMapRef = useRef(null);\r\n        let googleMap;\r\n\r\n        let camMarks = []\r\n        let alertMarks = []\r\n        let weatherMarks = []\r\n        const polygonalWash = require('../../bounds.json');\r\n        const washBounds = {\r\n            // north:49.0027,\r\n            // south:45.5439,\r\n            // east:-116.9165,\r\n            // west:-124.8679\r\n            north:50.0000,\r\n            south: 44.5439,\r\n            east:-115.0000,\r\n            west:-126.0000\r\n        }\r\n        const outterLine = [\r\n            {lat:60.0000, lng: -100.0000},\r\n            {lat:60.0000, lng:-140.0000},\r\n            {lat: 39.5439, lng:-140.0000},\r\n            {lat: 39.5439, lng: -100.0000}\r\n        ]\r\n\r\n        function cameraMarkers () {\r\n            API.CameraList()\r\n            .then(res => {\r\n                let camera = res.data\r\n                camera.forEach(item => {\r\n                    let LatLng = {\r\n                                    lat: item.Latitude,\r\n                                    lng: item.Longitude\r\n                                };\r\n              \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.title,\r\n                        icon: \"http://maps.google.com/mapfiles/kml/pal4/icon46.png\"\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>'+item.title+'</h!>'+\r\n                    '<br>'+\r\n                    '<img src=\"'+item.Image+'\" alt='\r\n                    +item.title + 'camera width=\"400\" height=\"400\">'+\r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n\r\n                    camMarks.push(marker);\r\n                    if (camState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function weatherMarker () {\r\n            API.WeatherList()\r\n            .then(res => {\r\n                let weatherDot = res.data\r\n                console.log(weatherDot)\r\n                weatherDot.forEach(item => {\r\n                    let temp = item.Temp.toString()\r\n                    let LatLng = {\r\n                        lat: item.Lat,\r\n                        lng: item.Long\r\n                    };\r\n  \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: temp,\r\n                        icon: \"http://maps.google.com/mapfiles/kml/pal4/icon30.png\"\r\n                    });\r\n                    let content;\r\n                    if (item.WindSpeed){\r\n                    content = '<div class=\"markerContent\"' + \r\n                    '<h1>Weather Information</h1>'+\r\n                    '<br>'+\r\n                    '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                    'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                    'Wind Speed: '+ item.WindSpeed.toString() + ' mph <br>'+\r\n                    'Wind Direction: '+item.WindDirect+\r\n                    '</p>'+\r\n                    '</div>';\r\n                    }\r\n                    else {\r\n                        content = '<div class=\"markerContent\"' + \r\n                        '<h1>Weather Information</h1>'+\r\n                        '<br>'+\r\n                        '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                        'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                        'Wind Direction: '+item.WindDirect+\r\n                        '</p>'+\r\n                        '</div>';  \r\n                    }\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    \r\n\r\n                    weatherMarks.push(marker);\r\n                    if (weatherState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function alertMarker() {\r\n            API.AlertsList()\r\n            .then(res => {\r\n                let alertDot = res.data\r\n                alertDot.forEach(item => {\r\n                    let markerIcon =''\r\n                    if (item.Priority===\"High\"){\r\n                        markerIcon = \"http://maps.google.com/mapfiles/kml/pal3/icon33.png\"\r\n                    }\r\n                    else if (item.Priority===\"Medium\"){\r\n                        markerIcon=\"http://maps.google.com/mapfiles/kml/pal3/icon45.png\"\r\n                    }\r\n                    else {\r\n                        markerIcon = \"http://maps.google.com/mapfiles/kml/pal4/icon60.png\"\r\n                    }\r\n\r\n\r\n                    let LatLng = {\r\n                        lat: item.Start.Lat,\r\n                        lng: item.Start.Long\r\n                    };\r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.Priority,\r\n                        icon: markerIcon\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>Alert Information</h1>'+\r\n                    '<br>'+\r\n                    '<h2>'+item.EventCategory+'</h2>'+\r\n                    '<br>'+\r\n                    '<p>'+item.HeadlineDescription+'</p>'+\r\n                    \r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    alertMarks.push(marker)\r\n                    if (alertState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        \r\n        function Border() {\r\n            const borderLine = new window.google.maps.Polygon({\r\n                paths: [outterLine,polygonalWash],\r\n                strokeColor: \"rgb(0,128,84)\",\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n                fillColor: \"#000000\",\r\n                fillOpacity: .50,\r\n\r\n              });\r\n              borderLine.setMap(googleMap);\r\n        }\r\n        function Traffic() {\r\n            var trafficLayer = new window.google.maps.TrafficLayer()\r\n            trafficLayer.setMap(googleMap)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            googleMap = initGoogleMap();\r\n            Traffic();\r\n            Border();\r\n            cameraMarkers();\r\n            weatherMarker();\r\n            alertMarker();\r\n        }, [coord,camState, weatherState, alertState]);\r\n\r\n       \r\n\r\n\r\n\r\n        function initGoogleMap ()  {\r\n            return new window.google.maps.Map(googleMapRef.current, {\r\n              center: coord,\r\n              restriction: {\r\n                latLngBounds: washBounds,\r\n                strictBounds: false,\r\n              },\r\n              zoom: 10\r\n            });\r\n          }\r\n\r\n        return (\r\n            <div  id =\"mapContainer\"\r\n                ref={googleMapRef}\r\n                style={{ width: 1019.33, height: 700 }}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\nexport default Map","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\nimport \"./style.css\"\r\n\r\n\r\n\r\nfunction Navigation () {\r\n    return (\r\n        <Navbar className= \"navigation\" collapseOnSelect expand=\"lg\">\r\n        <Navbar.Brand className=\"Brand\">\r\n            <img src={process.env.PUBLIC_URL + '/washingtonFlag.png'}\r\n            alt=\"washington seal\"\r\n            height=\"50\"\r\n            width=\"50\"\r\n            />\r\n            <p className=\"logo\">iDriveWashington</p>\r\n        </Navbar.Brand>\r\n     \r\n    </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport \"./style.css\"\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction Footer ({weatherState, camState, alertState, setCamState, setWeatherState, setAlertState}) {\r\n    function stateCamera () {\r\n        if (camState) {\r\n            setCamState(false)\r\n    \r\n        }\r\n        else {\r\n            setCamState(true)\r\n     \r\n        }\r\n    }\r\n    function stateAlert () {\r\n        if (alertState) {\r\n            setAlertState(false)\r\n       \r\n        }\r\n        else {\r\n            setAlertState(true)\r\n        \r\n        }\r\n    }\r\n    function stateWeather () {\r\n        if (weatherState) {\r\n            setWeatherState(false)\r\n           \r\n        }\r\n        else {\r\n            setWeatherState(true)\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar className = \"controlBar\">\r\n            <Nav className= \"mr-auto controls\">\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateCamera}>Cameras</button>\r\n            \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateWeather}>Weather</button>\r\n                    \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateAlert}>Alerts</button>\r\n                   \r\n                </Nav.Item>\r\n            </Nav>\r\n        </Navbar>   \r\n    )\r\n}\r\n\r\nexport default Footer","import React, {useState} from 'react'\r\nimport API from \"../utils/API\"\r\nimport \"./style.css\"\r\n\r\nfunction Table (props) {\r\n    const [sort, setSort] = useState({sortBy: (a, b) => a.distance - b.distance})\r\n\r\n        let data = props.alerts\r\n        data.forEach(alert => {\r\n            const alertCoord = {lat: alert.StartRoadwayLocation.Latitude , lng: alert.StartRoadwayLocation.Longitude}\r\n            alert.distance = API.Distance(props.coord, alertCoord)\r\n\r\n            switch (alert.Priority) {\r\n                case \"Highest\":\r\n                    alert.rating = 1;\r\n                    break;\r\n                case \"High\":\r\n                    alert.rating = 2;\r\n                    break;\r\n                case \"Medium\":\r\n                    alert.rating = 3;\r\n                    break;\r\n                case \"Low\":\r\n                    alert.rating = 4;\r\n                    break;\r\n                case \"Lowest\":\r\n                    alert.rating = 5;\r\n                    break;\r\n                default:\r\n                    alert.rating = 6\r\n            }\r\n        })\r\n        return (\r\n           <div>\r\n               <br></br>\r\n               <br></br>\r\n               <h3>Alerts</h3>\r\n               <br></br>\r\n               <table className = \"table alertsTab\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.rating - b.rating})}>Priority</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.EventCategory.localeCompare(b.EventCategory)})}>Category</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.StartRoadwayLocation.RoadName.localeCompare(b.StartRoadwayLocation.RoadName)})}>Road Name</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.HeadlineDescription.localeCompare(b.HeadlineDescription)})}>Description</th>\r\n\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.distance - b.distance})}>Distance from apprx location</th>\r\n\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.AlertID - b.AlertID})}>Alert ID</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {[...data].filter(alert => alert.StartRoadwayLocation.RoadName).sort(sort.sortBy).map(alert =>{ \r\n                            \r\n                            \r\n                        return (\r\n                        <tr key = {alert.AlertID} id = {alert.AlertID}>\r\n                            <td>{alert.Priority}</td>\r\n                            <td>{alert.EventCategory}</td>\r\n                            <td>{alert.StartRoadwayLocation.RoadName}</td>\r\n                            <td>{alert.HeadlineDescription}</td>\r\n                            <td>{alert.distance}</td>\r\n                            <td>{alert.AlertID}</td>\r\n                        </tr>\r\n                        )})}\r\n                    </tbody>\r\n                </table>\r\n           </div> \r\n        )\r\n    }\r\n\r\nexport default Table","import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Map from './components/googlemap';\nimport API from './components/utils/API';\nimport Navigation from './components/navbar';\nimport Footer from \"./components/footer\";\nimport Cameras from \"./cameras.json\";\nimport Table from \"./components/table\"\n\nconst loadGoogleMapScript = (callback) => {\n  if (typeof window.google === 'object' && typeof window.google.maps === 'object') {\n    callback();\n  } else {\n    const googleMapScript = document.createElement(\"script\");\n    googleMapScript.src = \"/api/google\";\n    window.document.body.appendChild(googleMapScript);\n    googleMapScript.addEventListener(\"load\", callback);\n  }\n}\n\n  function App () {\n\n  const [alerts, setAlerts] = useState([])\n  const [loadMap, setLoadMap] = useState(false);\n  const [coord, setCoord] = useState({ lat: 47.411293, lng: -120.55627 })\n  const [camState, setCamState] = useState(false);\n  const [alertState, setAlertState] =useState(false);\n  const [weatherState, setWeatherState] =useState(false);\n\n  \n  useEffect(() => {\n    loadGoogleMapScript(() => {\n      setLoadMap(true)\n    });\n  }, []);\n\n  useEffect(() => {\n    apiCalls();\n    initCoord()\n    const interval = setInterval(() => {\n      updateInfo()\n    }, 30*60*1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function initCoord(){\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(successFunction, errorFunction);\n    }\n    else{\n      alert(\"Geolocation is not allowed\")}\n\n    function successFunction(position) {\n      let currentLat = position.coords.latitude;\n      let currentLon = position.coords.longitude;\n\n          // north:49.0027,\n            // south:45.5439,\n            // east:-116.9165,\n            // west:-124.8679\n\n      if (currentLat >= 45.5439 && currentLat <= 49.0027 && currentLon >= -124.8679 && currentLon <= -116.9165){\n        setCoord({lat:currentLat, lng: currentLon})\n      }\n    }\n\n    function errorFunction(error){\n      switch(error.code) {\n          case error.PERMISSION_DENIED:\n            alert(\"User denied the request for Geolocation.\")\n            break;\n          case error.POSITION_UNAVAILABLE:\n            alert(\"Location information is unavailable.\")\n            break;\n          case error.TIMEOUT:\n            alert(\"The request to get user location timed out.\")\n            break;\n          case error.UNKNOWN_ERROR:\n            alert(\"An unknown error occurred.\")\n            break;\n        }\n    }\n  }\n\n  function updateInfo(){\n    API.clearWeather();\n    API.clearAlerts();\n    dWeath();\n    dAlert();\n    console.log(\"info updated\")\n  }\n\n  function apiCalls() {\n    API.clearWeather();\n    API.clearAlerts();\n    let cameras = {Cameras};\n    API.CameraList().then(res => {\n      \n      if (res.data.length > 0){\n      }\n      else{\n        let CamData = Object.values(cameras)\n        CamData = CamData[0]\n        CamData.filter(Camera => Camera.CameraOwner !== \"WSDOT Aviation\")\n        .forEach(e => {\n          setTimeout(() => {\n                        API.postCamera({\n                            CameraID:e.CameraID,\n                            Latitude:e.CameraLocation.Latitude,\n                            Longitude:e.CameraLocation.Longitude,\n                            Image:e.ImageURL,\n                            title:e.Title,\n                            description:e.Description\n                          })\n                          .then((res) => {\n                                console.log(\"Camera Loaded\")\n                            })\n                            .catch((err) => console.log(err));\n                      }, 100);\n        })\n      }\n    })\n    dWeath();\n    dAlert();\n\n\n    \n  }\n\n  function dWeath(){\n    API.downWeath()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n            if (res.data[i].TemperatureInFahrenheit && res.data[i].RelativeHumidity){\n              API.postWeath({\n                ID: res.data[i].StationID,\n                Lat:res.data[i].Latitude,\n                Long:res.data[i].Longitude,\n                Humidity:res.data[i].RelativeHumidity,\n                Temp:res.data[i].TemperatureInFahrenheit,\n                WindDirect:res.data[i].WindDirectionCardinal,\n                WindSpeed:res.data[i].WindSpeedInMPH  \n              })\n              .then((res) => {\n                  console.log(\"weather station \" +res)\n              })\n              .catch((err) => {\n                                console.log(err);\n                              });\n            }\n        }\n    })\n  }\n\n  function dAlert(){\n    API.downAlerts()\n    .then (res => {\n        setAlerts(res.data)\n        for (let i=0; i<res.data.length; i++){\n            API.postAlerts({\n                AlertID:res.data[i].AlertID,\n                Start: {\n                    Lat:res.data[i].StartRoadwayLocation.Latitude,\n                    Long:res.data[i].StartRoadwayLocation.Longitude,\n                    RoadName:res.data[i].StartRoadwayLocation.RoadName\n                },\n                End: {\n                    Lat:res.data[i].EndRoadwayLocation.Latitude,\n                    Long:res.data[i].EndRoadwayLocation.Longitude,\n                    RoadName:res.data[i].EndRoadwayLocation.RoadName\n                },\n                Priority:res.data[i].Priority,\n                EventCategory:res.data[i].EventCategory,\n                HeadlineDescription:res.data[i].HeadlineDescription\n            })\n            .then((res) => {\n                console.log(\"alerts \" +res)\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n\n                \n        }\n    });\n  }\n\n\n  \n\n    return (\n      <div className=\"App\">\n        <img className = \"backImage\" src= {process.env.PUBLIC_URL + '/washRoad.jpg'}/>\n        <div className=\"frontContent\">\n          <Navigation/>\n      \n  \n          {!loadMap ? <div>Loading...</div> : <Map \n                                                camState = {camState} \n                                                alertState = {alertState} \n                                                weatherState = {weatherState}\n                                                coord = {coord}\n                                          \n                                                />}\n          <Footer \n            setCamState = {setCamState} \n            setAlertState = {setAlertState} \n            setWeatherState = {setWeatherState}\n            camState = {camState} \n            alertState = {alertState} \n            weatherState = {weatherState}\n          />\n          <Table alerts = {alerts} coord = {coord}/>\n          \n        </div>\n      </div>\n    );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}