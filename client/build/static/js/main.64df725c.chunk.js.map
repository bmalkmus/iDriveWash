{"version":3,"sources":["components/utils/API.js","keys.js","components/googlemap/index.js","components/navbar/index.js","components/footer/index.js","components/table/index.js","components/travelTable/index.js","App.js","registerServiceWorker.js","index.js"],"names":["require","config","key","API","timeTravel","axios","get","concat","googleInfo","clearCam","delete","clearAlerts","clearWeather","downCameras","downWeath","downAlerts","postCamera","data","post","postWeath","postAlerts","CameraList","WeatherList","AlertsList","Distance","coord","alert","radlat1","Math","PI","lat","radlat2","theta","lng","radtheta","dist","sin","cos","acos","round","Map","_ref","googleMap","camState","alertState","weatherState","googleMapRef","useRef","camMarks","alertMarks","weatherMarks","polygonalWash","washBounds","north","south","east","west","outterLine","useEffect","window","google","maps","current","center","restriction","latLngBounds","strictBounds","zoom","TrafficLayer","setMap","Polygon","paths","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","then","res","forEach","item","LatLng","Latitude","Longitude","marker","Marker","position","title","icon","content","Image","infowindow","InfoWindow","addListener","open","push","temp","Temp","toString","Lat","Long","WindSpeed","Humidity","WindDirect","markerIcon","Priority","Start","EventCategory","HeadlineDescription","react_default","a","createElement","id","ref","style","width","height","Navigation","Navbar","sticky","className","collapseOnSelect","expand","Brand","src","alt","Collapse","Nav","Link","eventKey","href","target","rel","Footer","setCamState","setWeatherState","setAlertState","Item","onClick","Table","props","_useState","useState","sortBy","b","distance","_useState2","Object","slicedToArray","sort","setSort","_useState3","_useState4","consolidated","setConsol","alerts","alertCoord","StartRoadwayLocation","rating","row","document","getElementsByClassName","console","log","i","length","display","consolidation","localeCompare","RoadName","AlertID","toConsumableArray","filter","map","TravelTable","longTimes","times","CurrentTime","AverageTime","time","TravelTimeID","Description","loadGoogleMapScript","callback","googleMapScript","body","appendChild","addEventListener","App","setAlerts","loadMap","setLoadMap","_useState5","_useState6","setCoord","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","setTimes","dWeath","TemperatureInFahrenheit","RelativeHumidity","ID","StationID","WindDirectionCardinal","WindSpeedInMPH","catch","err","dAlert","End","EndRoadwayLocation","cameras","Cameras","CamData","values","Camera","CameraOwner","e","setTimeout","CameraID","CameraLocation","ImageURL","Title","description","apiCalls","navigator","geolocation","getCurrentPosition","currentLat","coords","latitude","currentLon","longitude","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","interval","setInterval","clearInterval","navbar","googlemap","footer","travelTable","table","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","ReactDOM","render","src_App","getElementById","URL","process","origin","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.64df725c.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport keys from '../../keys';\r\n\r\nrequire('dotenv').config();\r\nconst key = keys.wash();\r\n\r\nexport default {\r\n\r\n    timeTravel: function() {\r\n        return axios.get (`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/TravelTimes/TravelTimesREST.svc/GetTravelTimesAsJson?AccessCode=${key}`)\r\n    },\r\n    googleInfo: function () {\r\n        return axios.get('api/google')\r\n    },\r\n    clearCam: function () {\r\n        return axios.delete('api/cameras')   \r\n    },\r\n    clearAlerts: function () {\r\n        return axios.delete('api/alerts') \r\n    },\r\n    clearWeather: function () {\r\n        return axios.delete('api/weather') \r\n    },\r\n    downCameras: function () {\r\n        return axios.get (`https://cors-anywhere.herokuapp.com/http://www.wsdot.com/Traffic/api/HighwayCameras/HighwayCamerasREST.svc/GetCamerasAsJson?AccessCode=${key}`)\r\n    },\r\n    downWeath : function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/WeatherInformation/WeatherInformationREST.svc/GetCurrentWeatherInformationAsJson?AccessCode=${key}`)\r\n    },\r\n    downAlerts: function () {\r\n        return axios.get(`https://cors-anywhere.herokuapp.com/http://www.wsdot.wa.gov/Traffic/api/HighwayAlerts/HighwayAlertsREST.svc/GetAlertsAsJson?AccessCode=${key}`)\r\n    },\r\n    postCamera: function (data) {\r\n        return axios.post(\"api/cameras\", data)\r\n    },\r\n    postWeath: function (data) {\r\n        return axios.post(\"api/weather\", data)\r\n    },\r\n    postAlerts: function (data) {\r\n        return axios.post(\"api/alerts\", data)\r\n    },\r\n    CameraList: function () {\r\n        return axios.get('api/cameras')\r\n    },\r\n    WeatherList: function () {\r\n        return axios.get('api/weather')\r\n    },\r\n    AlertsList: function () {\r\n        return axios.get('api/alerts')\r\n    },\r\n    Distance: function (coord, alert) {\r\n        const radlat1 = Math.PI * coord.lat/180;\r\n\t\tconst radlat2 = Math.PI * alert.lat/180;\r\n\t\tconst theta = coord.lng-alert.lng;\r\n\t\tconst radtheta = Math.PI * theta/180;\r\n        let dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n\t\t\tdist = 1;\r\n\t\t}\r\n\t\tdist = Math.acos(dist);\r\n\t\tdist = dist * 180/Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        dist = Math.round(dist)\r\n\r\n        return dist\r\n    }\r\n    \r\n}","\r\n\r\nexport default {\r\n    google: function () {\r\n        return \"AIzaSyCqYJCfhuzDRI4b49rtUHSr6QNdxOvRihc\"\r\n    },\r\n    wash: function () {\r\n        return 'ce8eaa09-17ad-46c4-b626-97eaa3a2199d'\r\n    }\r\n}\r\n    \r\n\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\nimport API from '../utils/API';\r\nimport \"./style.css\"\r\n\r\nrequire('dotenv').config();\r\n\r\n \r\n    function Map({camState, alertState, weatherState, coord}){\r\n        const googleMapRef = useRef(null);\r\n        let googleMap;\r\n\r\n        let camMarks = []\r\n        let alertMarks = []\r\n        let weatherMarks = []\r\n        const polygonalWash = require('../../bounds.json');\r\n        const washBounds = {\r\n            // north:49.0027,\r\n            // south:45.5439,\r\n            // east:-116.9165,\r\n            // west:-124.8679\r\n            north:50.0000,\r\n            south: 44.5439,\r\n            east:-115.0000,\r\n            west:-126.0000\r\n        }\r\n        const outterLine = [\r\n            {lat:60.0000, lng: -100.0000},\r\n            {lat:60.0000, lng:-140.0000},\r\n            {lat: 39.5439, lng:-140.0000},\r\n            {lat: 39.5439, lng: -100.0000}\r\n        ]\r\n\r\n        function cameraMarkers () {\r\n            API.CameraList()\r\n            .then(res => {\r\n                let camera = res.data\r\n                camera.forEach(item => {\r\n                    let LatLng = {\r\n                                    lat: item.Latitude,\r\n                                    lng: item.Longitude\r\n                                };\r\n              \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.title,\r\n                        icon: process.env.PUBLIC_URL + '/camera.png'\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>'+item.title+'</h!>'+\r\n                    '<br>'+\r\n                    '<img src=\"'+item.Image+'\" alt='\r\n                    +item.title + 'camera width=\"400\" height=\"400\">'+\r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n\r\n                    camMarks.push(marker);\r\n                    if (camState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function weatherMarker () {\r\n            API.WeatherList()\r\n            .then(res => {\r\n                let weatherDot = res.data\r\n                weatherDot.forEach(item => {\r\n                    let temp = item.Temp.toString()\r\n                    let LatLng = {\r\n                        lat: item.Lat,\r\n                        lng: item.Long\r\n                    };\r\n  \r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: temp,\r\n                        icon: process.env.PUBLIC_URL + '/weather.png'\r\n                    });\r\n                    let content;\r\n                    if (item.WindSpeed){\r\n                    content = '<div class=\"markerContent\"' + \r\n                    '<h1>Weather Information</h1>'+\r\n                    '<br>'+\r\n                    '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                    'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                    'Wind Speed: '+ item.WindSpeed.toString() + ' mph <br>'+\r\n                    'Wind Direction: '+item.WindDirect+\r\n                    '</p>'+\r\n                    '</div>';\r\n                    }\r\n                    else {\r\n                        content = '<div class=\"markerContent\"' + \r\n                        '<h1>Weather Information</h1>'+\r\n                        '<br>'+\r\n                        '<p class=\"WeatherInfo\">Temperature: '+item.Temp.toString()+ '&#8457 <br>' +\r\n                        'Humidity: '+item.Humidity.toString()+'&#37 <br>'+\r\n                        'Wind Direction: '+item.WindDirect+\r\n                        '</p>'+\r\n                        '</div>';  \r\n                    }\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    \r\n\r\n                    weatherMarks.push(marker);\r\n                    if (weatherState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n\r\n        function alertMarker() {\r\n            API.AlertsList()\r\n            .then(res => {\r\n                let alertDot = res.data\r\n                alertDot.forEach(item => {\r\n                    let markerIcon =''\r\n                    if (item.Priority===\"High\" || item.Priority===\"Highest\"){\r\n                        markerIcon = process.env.PUBLIC_URL + '/high.png'\r\n                    }\r\n                    else if (item.Priority===\"Medium\"){\r\n                        markerIcon=process.env.PUBLIC_URL + '/medium.png'\r\n                    }\r\n                    else {\r\n                        markerIcon = process.env.PUBLIC_URL + '/low.png'\r\n                    }\r\n\r\n\r\n                    let LatLng = {\r\n                        lat: item.Start.Lat,\r\n                        lng: item.Start.Long\r\n                    };\r\n                    const marker = new window.google.maps.Marker({\r\n                        position: LatLng,\r\n                        title: item.Priority,\r\n                        icon: markerIcon\r\n                    });\r\n\r\n                    const content = '<div class=\"markerContent\"' + \r\n                    '<h1>Alert Information</h1>'+\r\n                    '<br>'+\r\n                    '<h2>'+item.EventCategory+'</h2>'+\r\n                    '<br>'+\r\n                    '<p>'+item.HeadlineDescription+'</p>'+\r\n                    \r\n                    '</div>';\r\n\r\n                    const infowindow = new window.google.maps.InfoWindow({\r\n                        content: content\r\n                      });\r\n\r\n                    marker.addListener(\"click\", () => {\r\n                        infowindow.open(googleMap,marker)\r\n                      });\r\n\r\n                    alertMarks.push(marker)\r\n                    if (alertState){\r\n                        marker.setMap(googleMap)\r\n                    }\r\n                    else {\r\n                        marker.setMap(null)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        \r\n        function Border() {\r\n            const borderLine = new window.google.maps.Polygon({\r\n                paths: [outterLine,polygonalWash],\r\n                strokeColor: \"rgb(0,128,84)\",\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 5,\r\n                fillColor: \"#000000\",\r\n                fillOpacity: .50,\r\n\r\n              });\r\n              borderLine.setMap(googleMap);\r\n        }\r\n        function Traffic() {\r\n            var trafficLayer = new window.google.maps.TrafficLayer()\r\n            trafficLayer.setMap(googleMap)\r\n        }\r\n\r\n\r\n        useEffect(() => {\r\n            googleMap = initGoogleMap();\r\n            Traffic();\r\n            Border();\r\n            cameraMarkers();\r\n            weatherMarker();\r\n            alertMarker();\r\n        }, [coord,camState, weatherState, alertState]);\r\n\r\n       \r\n\r\n\r\n\r\n        function initGoogleMap ()  {\r\n            return new window.google.maps.Map(googleMapRef.current, {\r\n              center: coord,\r\n              restriction: {\r\n                latLngBounds: washBounds,\r\n                strictBounds: false,\r\n              },\r\n              zoom: 10\r\n            });\r\n          }\r\n\r\n        return (\r\n            <div  id =\"mapContainer\"\r\n                ref={googleMapRef}\r\n                style={{ width: 1019.33, height: 700 }}\r\n            />\r\n        );\r\n    }\r\n\r\n\r\nexport default Map","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport \"./style.css\"\r\n\r\n\r\n\r\nfunction Navigation () {\r\n    return (\r\n        <Navbar sticky=\"top\" className= \"navigation\" collapseOnSelect expand=\"lg\">\r\n        <Navbar.Brand className=\"Brand\">\r\n            <img src={process.env.PUBLIC_URL + '/washingtonFlag.png'}\r\n            alt=\"washington seal\"\r\n            height=\"50\"\r\n            width=\"50\"\r\n            />\r\n            <p className=\"logo\">iDriveWashington</p>\r\n        </Navbar.Brand>\r\n        {/* <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" /> */}\r\n        <Navbar.Collapse className=\"rightLinks\" id=\"responsive-navbar-nav\">\r\n            <Nav>\r\n                <Nav.Link eventKey=\"1\" className=\"alertLink\" href=\"#alertTable\">Alerts</Nav.Link>\r\n                <Nav.Link eventKey=\"2\" className=\"alertLink\" href=\"https://www.wsdot.com/traffic/passes/camera.aspx\" target=\"_blank\" rel=\"noopener noreferrer\">Mountain Passes</Nav.Link>\r\n                <Nav.Link eventKey=\"3\" className=\"alertLink\" href=\"#timeTable\">Travel Times</Nav.Link>\r\n                {/* <Navbar.Text className=\"alertLink\">\r\n                    <a href=\"#alertTable\"> Alerts </a>\r\n                </Navbar.Text>\r\n                <Navbar.Text className=\"alertLink\">\r\n                    <a href=\"https://www.wsdot.com/traffic/passes/camera.aspx\" target=\"_blank\" rel=\"noopener noreferrer\"> Mountain Passes</a>\r\n                </Navbar.Text>\r\n                <Navbar.Text className=\"alertLink\">\r\n                    <a href=\"#timeTable\"> Travel Times</a>\r\n                </Navbar.Text> */}\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n     \r\n    </Navbar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from 'react';\r\nimport \"./style.css\"\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction Footer ({weatherState, camState, alertState, setCamState, setWeatherState, setAlertState}) {\r\n    function stateCamera () {\r\n        if (camState) {\r\n            setCamState(false)\r\n    \r\n        }\r\n        else {\r\n            setCamState(true)\r\n     \r\n        }\r\n    }\r\n    function stateAlert () {\r\n        if (alertState) {\r\n            setAlertState(false)\r\n       \r\n        }\r\n        else {\r\n            setAlertState(true)\r\n        \r\n        }\r\n    }\r\n    function stateWeather () {\r\n        if (weatherState) {\r\n            setWeatherState(false)\r\n           \r\n        }\r\n        else {\r\n            setWeatherState(true)\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Navbar className = \"controlBar\">\r\n            <Nav className= \"mr-auto controls\">\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateCamera}>Cameras</button>\r\n            \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateWeather}>Weather</button>\r\n                    \r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                    \r\n                        <button onClick = {stateAlert}>Alerts</button>\r\n                   \r\n                </Nav.Item>\r\n            </Nav>\r\n        </Navbar>   \r\n    )\r\n}\r\n\r\nexport default Footer","import React, {useState} from 'react'\r\nimport API from \"../utils/API\"\r\nimport \"./style.css\"\r\n\r\nfunction Table (props) {\r\n    const [sort, setSort] = useState({sortBy: (a, b) => a.distance - b.distance})\r\n    const [consolidated, setConsol] = useState(true)\r\n\r\n    function consolidation() {\r\n\r\n        var row = document.getElementsByClassName(\"alertsRow\");\r\n        console.log(row)\r\n        console.log(consolidated)\r\n        if (consolidated === true) {\r\n            setConsol(false)\r\n            for (let i = 11; i < row.length; i++) {\r\n                row[i].style.display = \"table-row\";\r\n            }\r\n        }\r\n        else{\r\n            setConsol(true)\r\n            for (let i = 11; i < row.length; i++) {\r\n                row[i].style.display = \"none\";\r\n            }\r\n        }\r\n    }\r\n\r\n        let data = props.alerts\r\n\r\n        data.forEach(alert => {\r\n            const alertCoord = {lat: alert.StartRoadwayLocation.Latitude , lng: alert.StartRoadwayLocation.Longitude}\r\n            alert.distance = API.Distance(props.coord, alertCoord)\r\n            \r\n            switch (alert.Priority) {\r\n                case \"Highest\":\r\n                    alert.rating = 1;\r\n                    break;\r\n                case \"High\":\r\n                    alert.rating = 2;\r\n                    break;\r\n                case \"Medium\":\r\n                    alert.rating = 3;\r\n                    break;\r\n                case \"Low\":\r\n                    alert.rating = 4;\r\n                    break;\r\n                case \"Lowest\":\r\n                    alert.rating = 5;\r\n                    break;\r\n                default:\r\n                    alert.rating = 6\r\n            }\r\n        })\r\n\r\n        return (\r\n           <div id = \"tableDiv\">\r\n               <br></br>\r\n               <br></br>\r\n               <div className = \"tableTitle\" id =\"alertTable\" onClick={() => consolidation()}>\r\n                    <h3>Alerts</h3>\r\n                    <span>(Click for table expansion)</span>\r\n               </div>\r\n               <br></br>\r\n               <table className = \"table iDriveTab\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.rating - b.rating})}>Priority</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.EventCategory.localeCompare(b.EventCategory)})}>Category</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.StartRoadwayLocation.RoadName.localeCompare(b.StartRoadwayLocation.RoadName)})}>Road Name</th>\r\n\r\n                            <th className = \"alertHead\" onClick = {() => setSort({sortBy: (a, b) => a.HeadlineDescription.localeCompare(b.HeadlineDescription)})}>Description</th>\r\n\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.distance - b.distance})}>Distance from apprx location</th>\r\n\r\n                            <th className = \"alertHead\" onClick ={() => setSort({sortBy: (a, b) => a.AlertID - b.AlertID})}>Alert ID</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {[...data].filter(alert => alert.StartRoadwayLocation.RoadName).sort(sort.sortBy).map(alert =>{ \r\n                            \r\n                            \r\n                        return (\r\n                        <tr key = {alert.AlertID} id = {alert.AlertID} className=\"alertsRow\">\r\n                            <td>{alert.Priority}</td>\r\n                            <td>{alert.EventCategory}</td>\r\n                            <td>{alert.StartRoadwayLocation.RoadName}</td>\r\n                            <td>{alert.HeadlineDescription}</td>\r\n                            <td>{alert.distance}</td>\r\n                            <td>{alert.AlertID}</td>\r\n                        </tr>\r\n                        )})}\r\n                    </tbody>\r\n                </table>\r\n           </div> \r\n        )\r\n    }\r\n\r\nexport default Table","import React from 'react';\r\nimport \"./style.css\"\r\n\r\nfunction TravelTable(props) {\r\n    const times = props.times;\r\n    const longTimes = times.filter(item => item.CurrentTime > item.AverageTime)\r\n    console.log(longTimes)\r\n    return (\r\n        <div id=\"timeTable\">\r\n            <br/>\r\n            <br/>\r\n            <div id=\"ttTable\">\r\n                <h3>Longer Travel Times</h3>\r\n            </div>\r\n            <br/>\r\n            <table className=\"table iDriveTab\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Direction</th>\r\n                        <th>Current Travel Time</th>\r\n                        <th>Average Travel Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {[...longTimes].map(time => {\r\n                        return (\r\n                            <tr key = {time.TravelTimeID}>\r\n                                <td>{time.Description}</td>\r\n                                <td>{time.CurrentTime}</td>\r\n                                <td>{time.AverageTime}</td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TravelTable","import React, { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Map from './components/googlemap';\nimport API from './components/utils/API';\nimport Navigation from './components/navbar';\nimport Footer from \"./components/footer\";\nimport Cameras from \"./cameras.json\";\nimport Table from \"./components/table\";\nimport TravelTable from \"./components/travelTable\"\n\nconst loadGoogleMapScript = (callback) => {\n  if (typeof window.google === 'object' && typeof window.google.maps === 'object') {\n    callback();\n  } else {\n    const googleMapScript = document.createElement(\"script\");\n    googleMapScript.src = \"/api/google\";\n    window.document.body.appendChild(googleMapScript);\n    googleMapScript.addEventListener(\"load\", callback);\n  }\n}\n\n  function App () {\n\n  const [alerts, setAlerts] = useState([])\n  const [loadMap, setLoadMap] = useState(false);\n  const [coord, setCoord] = useState({ lat: 47.411293, lng: -120.55627 })\n  const [camState, setCamState] = useState(false);\n  const [alertState, setAlertState] =useState(false);\n  const [weatherState, setWeatherState] =useState(false);\n  const [times, setTimes] = useState([]);\n\n  \n  useEffect(() => {\n    loadGoogleMapScript(() => {\n      setLoadMap(true)\n    });\n  }, []);\n\n  useEffect(() => {\n    apiCalls();\n    initCoord()\n    const interval = setInterval(() => {\n      updateInfo()\n    }, 30*60*1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  function initCoord(){\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(successFunction, errorFunction);\n    }\n    else{\n      alert(\"Geolocation is not allowed\")}\n\n    function successFunction(position) {\n      let currentLat = position.coords.latitude;\n      let currentLon = position.coords.longitude;\n\n          // north:49.0027,\n            // south:45.5439,\n            // east:-116.9165,\n            // west:-124.8679\n\n      if (currentLat >= 45.5439 && currentLat <= 49.0027 && currentLon >= -124.8679 && currentLon <= -116.9165){\n        setCoord({lat:currentLat, lng: currentLon})\n      }\n    }\n\n    function errorFunction(error){\n      switch(error.code) {\n          case error.PERMISSION_DENIED:\n            alert(\"User denied the request for Geolocation.\")\n            break;\n          case error.POSITION_UNAVAILABLE:\n            alert(\"Location information is unavailable.\")\n            break;\n          case error.TIMEOUT:\n            alert(\"The request to get user location timed out.\")\n            break;\n          case error.UNKNOWN_ERROR:\n            alert(\"An unknown error occurred.\")\n            break;\n          default:\n            alert(\"An unknown error occurred.\")\n        }\n    }\n  }\n\n  function updateInfo(){\n    API.clearWeather();\n    API.clearAlerts();\n    dWeath();\n    dAlert();\n    console.log(\"info updated\")\n  }\n\n  function apiCalls() {\n    API.clearWeather();\n    API.clearAlerts();\n    let cameras = {Cameras};\n    API.CameraList().then(res => {\n      \n      if (res.data.length > 0){\n      }\n      else{\n        let CamData = Object.values(cameras)\n        CamData = CamData[0]\n        CamData.filter(Camera => Camera.CameraOwner !== \"WSDOT Aviation\")\n        .forEach(e => {\n          setTimeout(() => {\n                        API.postCamera({\n                            CameraID:e.CameraID,\n                            Latitude:e.CameraLocation.Latitude,\n                            Longitude:e.CameraLocation.Longitude,\n                            Image:e.ImageURL,\n                            title:e.Title,\n                            description:e.Description\n                          })\n                          .then((res) => {\n                                console.log(\"Camera Loaded\")\n                            })\n                            .catch((err) => console.log(err));\n                      }, 100);\n        })\n      }\n    })\n    dWeath();\n    dAlert();\n    tTimes();\n\n\n    \n  }\n\n  function tTimes(){\n    API.timeTravel()\n    .then(res => {\n        setTimes(res.data)\n    })\n  }\n\n  function dWeath(){\n    API.downWeath()\n    .then (res => {\n        for (let i=0; i<res.data.length; i++){\n            if (res.data[i].TemperatureInFahrenheit && res.data[i].RelativeHumidity){\n              API.postWeath({\n                ID: res.data[i].StationID,\n                Lat:res.data[i].Latitude,\n                Long:res.data[i].Longitude,\n                Humidity:res.data[i].RelativeHumidity,\n                Temp:res.data[i].TemperatureInFahrenheit,\n                WindDirect:res.data[i].WindDirectionCardinal,\n                WindSpeed:res.data[i].WindSpeedInMPH  \n              })\n              .then((res) => {\n              })\n              .catch((err) => {\n                                console.log(err);\n                              });\n            }\n        }\n    })\n  }\n\n  function dAlert(){\n    API.downAlerts()\n    .then (res => {\n        setAlerts(res.data)\n        for (let i=0; i<res.data.length; i++){\n            API.postAlerts({\n                AlertID:res.data[i].AlertID,\n                Start: {\n                    Lat:res.data[i].StartRoadwayLocation.Latitude,\n                    Long:res.data[i].StartRoadwayLocation.Longitude,\n                    RoadName:res.data[i].StartRoadwayLocation.RoadName\n                },\n                End: {\n                    Lat:res.data[i].EndRoadwayLocation.Latitude,\n                    Long:res.data[i].EndRoadwayLocation.Longitude,\n                    RoadName:res.data[i].EndRoadwayLocation.RoadName\n                },\n                Priority:res.data[i].Priority,\n                EventCategory:res.data[i].EventCategory,\n                HeadlineDescription:res.data[i].HeadlineDescription\n            })\n            .then((res) => {\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n\n                \n        }\n    });\n  }\n\n\n  \n\n    return (\n      <div className=\"App\">\n        <img className = \"backImage\" src= {process.env.PUBLIC_URL + '/washRoad.jpg'} alt = \"Washington State Cascade Highway\"/>\n        <div className=\"frontContent\">\n          <Navigation/>\n      \n  \n          {!loadMap ? <div>Loading...</div> : <Map \n                                                camState = {camState} \n                                                alertState = {alertState} \n                                                weatherState = {weatherState}\n                                                coord = {coord}\n                                          \n                                                />}\n          <Footer \n            setCamState = {setCamState} \n            setAlertState = {setAlertState} \n            setWeatherState = {setWeatherState}\n            camState = {camState} \n            alertState = {alertState} \n            weatherState = {weatherState}\n          />\n          <TravelTable times={times}/>\n          <Table alerts = {alerts} coord = {coord}/>\n\n          \n        </div>\n      </div>\n    );\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}